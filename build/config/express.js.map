{"version":3,"sources":["../../src/config/express.js"],"names":["MongoStore","require","app","module","exports","init","resolve","reject","use","credentials","origin","json","urlencoded","extended","req","res","next","console","log","method","path","send","header","setHeader","port","process","env","PORT","server","listen","info"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA;AACA,IAAMA,aAAaC,QAAQ,eAAR,2BAAnB;;AAEA,IAAMC,MAAM,wBAAZ;;AAEAC,OAAOC,OAAP,CAAeC,IAAf,GAAsB,YAAK;AAC1B,SAAO,uBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEvCL,QAAIM,GAAJ,CAAQ,oBAAK,EAACC,aAAa,IAAd,EAAqBC,QAAQ,IAA7B,EAAL,CAAR;;AAEER,QAAIM,GAAJ,CAAQ,qBAAWG,IAAX,EAAR;;AAEFT,QAAIM,GAAJ,CAAQ,qBAAWI,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;;AAEAX,QAAIM,GAAJ,CAAQ,6BAAR;;AAEAN,QAAIM,GAAJ,CAAQ,UAACM,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAgB;AACvBC,cAAQC,GAAR,CAAYJ,IAAIK,MAAhB,EAAwBL,IAAIM,IAA5B;AACA,UAAGN,IAAIK,MAAJ,KAAe,SAAlB,EACCJ,IAAIM,IAAJ,GADD,KAGCL;AACD;;AAED;AACA;AACA;AACA;AACG;AACA;AACA;AACA;AACA;AACH;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AArCA,MAuCEd,IAAIM,GAAJ,CAAQ,UAAUM,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;;AAEhC;AACAD,UAAIO,MAAJ,CAAW,6BAAX,EAA0C,uBAA1C;;AAEA;AACAP,UAAIQ,SAAJ,CAAc,8BAAd,EAA8C,wCAA9C;;AAEA;AACAR,UAAIQ,SAAJ,CAAc,8BAAd,EAA8C,+BAA9C;;AAEA;AACA;AACAR,UAAIQ,SAAJ,CAAc,kCAAd,EAAkD,IAAlD;;AAEA;AACAP;AACD,KAjBD;;AAmBF;AACA;;AAEE,QAAMQ,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;;AAEA,QAAMC,SAAS1B,IAAI2B,MAAJ,CAAWJ,QAAQC,GAAR,CAAYC,IAAvB,EAA6B,YAAM;AAChDV,cAAQa,IAAR,6BAAuCL,QAAQC,GAAR,CAAYC,IAAnD;AACA,aAAOrB,SAAP;AACD,KAHc,CAAf;AAKF,GA9EM,CAAP;AA+EA,CAhFD;;AAmFAH,OAAOC,OAAP,CAAeF,GAAf,GAAqBA,GAArB","file":"express.js","sourcesContent":["import bodyParser from 'body-parser'\nimport cookieParser from 'cookie-parser'\nimport express from 'express'\nimport Promise from 'bluebird'\nimport passport from 'passport'\nimport session from 'express-session'\nimport mongoose from 'mongoose'\nimport cors from 'cors'\nimport Company from '../schemas/example'\n// const MongoStore = require('connect-mongostore')(session);\nconst MongoStore = require('connect-mongo')(session)\n\nconst app = express()\n\nmodule.exports.init = ()=> {\n\treturn new Promise((resolve, reject) => {\n\n\t\tapp.use(cors({credentials: true,  origin: true}))\n\n    app.use(bodyParser.json())\n\n\t\tapp.use(bodyParser.urlencoded({ extended: true }))\n\t\n\t\tapp.use(cookieParser())\n\n\t\tapp.use((req,res,next)=>{\n\t\t\tconsole.log(req.method, req.path)\n\t\t\tif(req.method === \"OPTIONS\")\n\t\t\t\tres.send()\n\t\t\telse\n\t\t\t\tnext()\n\t\t})\n\t\t\n\t\t// app.use(session({\n\t\t// \tsecret: 'foo',\n\t\t// \tname: \"textpay\",\n\t\t// \tstore: new MongoStore({ mongooseConnection: mongoose.connection }),\n     //  resave: true,\n     //  saveUninitialized: true,\n     //  // cookie: {\n     //  //   domain: \"localhost\"\n     //  // }\n\t\t// }))\n\t\t\n\t\t// app.use(passport.initialize())\n\t\t\n\t\t// app.use(passport.session())\n\t\t\t\t\t\n\t\t// Serialize sessions\n\t\t// passport.serializeUser(function (user, done) {\n\t\t// \tdone(null, user._id)\n\t\t// })\n\t\t//\n\t\t// // Deserialize sessions\n\t\t// passport.deserializeUser(function (id, done) {\n     //  Company.findOne({\n\t\t// \t\t_id: id\n\t\t// \t}, '-salt -password', function (err, user) {\n\t\t// \t\tif(!user)\n\t\t// \t\t\treturn done(err, null)\n\t\t// \t\tdone(err, user)\n\t\t// \t})\n\t\t// });\n\n    app.use(function (req, res, next) {\n\n      // Website you wish to allow to connect\n      res.header(\"Access-Control-Allow-Origin\", \"http://localhost:3001\");\n\n      // Request methods you wish to allow\n      res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n\n      // Request headers you wish to allow\n      res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\n\n      // Set to true if you need the website to include cookies in the requests sent\n      // to the API (e.g. in case you use sessions)\n      res.setHeader('Access-Control-Allow-Credentials', true);\n\n      // Pass to next layer of middleware\n      next();\n    });\n\t\t\n\t\t// init startegies\n\t\t// require('./passport')(passport)\n\n    const port = process.env.PORT || 3000\n\n    const server = app.listen(process.env.PORT, () => {\n      console.info(`server started on port ${process.env.PORT}`)\n      return resolve()\n    })\n\n\t})\n}\n\n\nmodule.exports.app = app;\n"]}