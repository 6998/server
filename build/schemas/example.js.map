{"version":3,"sources":["../../src/schemas/example.js"],"names":["Schema","validateLocalStrategyProperty","property","length","validateLocalStrategyEmail","isEmail","email","require_tld","ExampleSchema","company","type","String","trim","default","validate","stripeKey","index","unique","sparse","lowercase","password","required","stripeId","salt","updated","Date","created","now","resetPasswordToken","resetPasswordExpires","secret","secretDat","contact","displayName","address","city","phone","model"],"mappings":"AAAA;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAGA,IAAMA,SAAS,mBAASA,MAAxB;;AAEA,IAAMC,gCAAiC,SAAjCA,6BAAiC,WAAU;AAChD,QAAOC,SAASC,MAAhB;AACA,CAFD;;AAIA,IAAMC,6BAA6B,SAA7BA,0BAA6B,QAAQ;AAC1C,QAAO,oBAAUC,OAAV,CAAkBC,KAAlB,EAAyB,EAAEC,aAAa,KAAf,EAAzB,CAAP;AACA,CAFD;;AAIA,IAAIC,gBAAgB,IAAIR,MAAJ,CAAW;AAC9BS,UAAS;AACRC,QAAMC,MADE;AAERC,QAAM,IAFE;AAGRC,WAAS,EAHD;AAIRC,YAAU,CAACb,6BAAD,EAAgC,wBAAhC;AAJF,EADqB;AAO7Bc,YAAW;AACXL,QAAMC,MADK;AAEXC,QAAM,IAFK;AAGXC,WAAS;AAHE,EAPkB;AAY9BP,QAAO;AACNI,QAAMC,MADA;AAENK,SAAO;AACNC,WAAQ,IADF;AAENC,WAAQ;AAFF,GAFD;AAMNC,aAAW,IANL;AAONP,QAAM,IAPA;AAQNC,WAAS,EARH;AASNC,YAAU,CAACV,0BAAD,EAA6B,mCAA7B;AATJ,EAZuB;AAuB9BgB,WAAU;AACTV,QAAMC,MADG;AAETE,WAAS,EAFA;AAGTQ,YAAU;AAHD,EAvBoB;AA4B7BC,WAAU;AACRZ,QAAMC,MADE;AAERE,WAAS;AAFD,EA5BmB;AAgC9BU,OAAM;AACLb,QAAMC;AADD,EAhCwB;AAmC9Ba,UAAS;AACRd,QAAMe;AADE,EAnCqB;AAsC9BC,UAAS;AACRhB,QAAMe,IADE;AAERZ,WAASY,KAAKE;AAFN,EAtCqB;AA0C9BC,qBAAoB;AACnBlB,QAAMC;AADa,EA1CU;AA6C9BkB,uBAAsB;AACrBnB,QAAMe;AADe,EA7CQ;AAgD9BK,SAAQ;AACPpB,QAAMC;AADC,EAhDsB;AAmD9BoB,YAAU;AACTrB,QAAMe;AADG,EAnDoB;AAsD7BO,UAAS;AACPtB,QAAMC;AADC,EAtDoB;AAyD7BsB,cAAa;AACZvB,QAAMC;AADM,EAzDgB;AA4D7BuB,UAAS;AACRC,QAAK;AACJzB,SAAMC,MADF;AAELuB,YAASvB;AAFJ;AADG,EA5DoB;AAkE7ByB,QAAO;AACL1B,QAAMC;AADD;AAlEsB,CAAX,CAApB;;kBAwEe,mBAAS0B,KAAT,CAAe,SAAf,EAA0B7B,aAA1B,C","file":"example.js","sourcesContent":["'use strict';\n\nimport mongoose from 'mongoose'\nimport crypto from 'crypto'\nimport validator from 'validator'\n\n\nconst Schema = mongoose.Schema\n\nconst validateLocalStrategyProperty =  property=>{\n\treturn property.length\n}\n\nconst validateLocalStrategyEmail = email=> {\n\treturn validator.isEmail(email, { require_tld: false })\n};\n\nvar ExampleSchema = new Schema({\n\tcompany: {\n\t\ttype: String,\n\t\ttrim: true,\n\t\tdefault: '',\n\t\tvalidate: [validateLocalStrategyProperty, 'Please fill in company']\n\t},\n  stripeKey: {\n\t\ttype: String,\n\t\ttrim: true,\n\t\tdefault: '',\n\t},\n\temail: {\n\t\ttype: String,\n\t\tindex: {\n\t\t\tunique: true,\n\t\t\tsparse: true\n\t\t},\n\t\tlowercase: true,\n\t\ttrim: true,\n\t\tdefault: '',\n\t\tvalidate: [validateLocalStrategyEmail, 'Please fill a valid email address']\n\t},\n\tpassword: {\n\t\ttype: String,\n\t\tdefault: '',\n\t\trequired: true\n\t},\n  stripeId: {\n    type: String,\n    default: '',\n  },\n\tsalt: {\n\t\ttype: String\n\t},\n\tupdated: {\n\t\ttype: Date\n\t},\n\tcreated: {\n\t\ttype: Date,\n\t\tdefault: Date.now\n\t},\n\tresetPasswordToken: {\n\t\ttype: String\n\t},\n\tresetPasswordExpires: {\n\t\ttype: Date\n\t},\n\tsecret: {\n\t\ttype: String\n\t},\n\tsecretDat:{\n\t\ttype: Date\n\t},\n  contact: {\n    type: String\n  },\n  displayName: {\n  \ttype: String\n\t},\n  address: {\n  \tcity:{\n  \t\ttype: String,\n\t\t\taddress: String\n\t\t}\n\t},\n  phone: {\n    type: String\n  },\n});\n\n\nexport default mongoose.model('Company', ExampleSchema)"]}